- Using gdb -

1. Looking at the backtrace output, which function called syscall? 

(gdb) backtrace 
#0  syscall () at kernel/syscall.c:133
#1  0x00000000800019dc in usertrap () at kernel/trap.c:67
#2  0x0505050505050505 in ?? ()

2. What is the value of p->trapframe->a7 and what does that value represent? (Hint: look user/initcode.S, the first user program xv6 starts.) 
(gdb) p num
$1 = 7

initcode.S:
# exec(init, argv)
.globl start
start:
        la a0, init
        la a1, argv
        li a7, SYS_exec
        ecall
represents the syscall SYS_exec number

3. What was the previous mode that the CPU was in? 
(gdb) p /x $sstatus
$2 = 0x200000022
Page 63 - https://github.com/riscv/riscv-isa-manual/releases/download/Priv-v1.12/riscv-privileged-20211203.pdf
0x200000022 -> 1000000000000000000000000000100010
the 8-th bit is 0 -> means previously the trap originated from user mode

4. Write down the assembly instruction the kernel is panicing at. Which register corresponds to the variable num? 
kernel.asm:
  //num = p->trapframe->a7;
  num = * (int *) 0;
    80001c30:	00002683          	lw	a3,0(zero) # 0 <_entry-0x80000000>
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
num is lw

5. Why does the kernel crash? Hint: look at figure 3-3 in the text; is address 0 mapped in the kernel address space?
Is that confirmed by the value in scause above? (See description of scause in RISC-V privileged instructions)
Memory at address 0 is unused, it isn't mapped
scause=0xd -> 1101 -> 0|13 -> Load page fault
Page 70, then 71
https://github.com/riscv/riscv-isa-manual/releases/download/Priv-v1.12/riscv-privileged-20211203.pdf

6. What is the name of the process that was running when the kernel paniced? What is its process id (pid)? 
(gdb) p p->name
$1 = "initcode\000\000\000\000\000\000\000"

(gdb) p p->pid
$2 = 1

- System call tracing -

